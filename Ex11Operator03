public class Ex11Operator03 {

	public static void main(String[] args) {
		int num1 = 4;
		int num2 = 5;
		System.out.println("num1 < num2 is " + (num1< num2));
		System.out.println("num1 < 0 is " + (num1 < 0));
		System.out.println("num1 < 4 is " + (num1 < 4));
		System.out.println("num1 <= 4 is " + (num1 <= 4));
		System.out.println("num1 == 4 is " + (num1 == 4));
		System.out.println("num1 != 4 is " + (num1 != 4));
		
//		단, 참조형 데이터타입의 값이 같은지 확인할 때에는
//		비교 연산자를 사용해선 안된다!
//		String 변수 string1, string2, string3을 선언하고 각각 "abc"라는 글자를
//		3가지 방법으로 초기화해보자
		String string1 = "abc";
		String string2 = new String("abc");
		String string3 = string1;
		String string4 = "a"+"b"+"c";
		System.out.println(string1);
		System.out.println(string2);
		System.out.println(string3);
		System.out.println(string4);
//		string1, string2 string3이 모두 abc만 들어가있는지 확인하기 위해서
//		string#: [###]의 형태로 출력해보자
		System.out.println("string1: [" +string1+ "]");
		System.out.println("string2: [" +string2+ "]");
		System.out.println("string3: [" +string3+ "]");
//		==를 사용하여  string1~3까지 모두 같은 갓을 가지고 있는지 확인해보자
		System.out.println("string1 == string2: " + (string1 == string2));
		System.out.println("string1 == string3: " + (string1 == string3));
		System.out.println("string2 == string3: " + (string2 == string3));
		System.out.println("string3 == string4: " + (string3 == string4));
//		왜 2번과 나머지는 다른가? 비교연산자는 현재 해당 공간에 저장된 값을 기준으로 비교를 한다.
//		참조형 데이터타입의 변수/상수는 해당 공간에 실제 값이 아닌
//		실제 값이 저장된 공간의"주소값"을 저장한다.
//		즉, 참조형 데이터타입 공간을 비교연산자로 비교하면
//		실제값이 아닌, 주소값을 기준으로 비교를 실행하게 된다!
		
//		참조형 데이터타입의 값을 비교를 할 때에는 비교연산자가 아닌
//		equals()라는 메소드를 통하여 비교를 해야 올바른 결과값이 나오게 된다.
		System.out.println("string1.equals(string2): " + (string1.equals(string2)));
		System.out.println("string1.equals(string3): " + (string1.equals(string3)));
		System.out.println("string2.equals(string3): " + (string2.equals(string3)));
	}

}
